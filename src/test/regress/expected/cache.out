--
-- Test cachable expressions
--
-- If the NOTICE outputs of these functions change, you've probably broken
-- something with the CacheExpr optimization
--
create function stable_true() returns bool STABLE language plpgsql as
$$begin raise notice 'STABLE TRUE'; return true; end;$$;
create function volatile_true() returns bool VOLATILE language plpgsql as
$$begin raise notice 'VOLATILE TRUE'; return true; end;$$;
create function stable_false() returns bool STABLE language plpgsql as
$$begin raise notice 'STABLE FALSE'; return false; end;$$;
create function volatile_false() returns bool VOLATILE language plpgsql as
$$begin raise notice 'VOLATILE FALSE'; return false; end;$$;
-- Table with two rows
create table two (i int);
insert into two values (1), (2);
-- Boolean expressions
select stable_false() or volatile_true() or stable_true() as b from two;
NOTICE:  STABLE FALSE
NOTICE:  STABLE TRUE
 b 
---
 t
 t
(2 rows)

select stable_true() or volatile_false() or stable_false() as b from two;
NOTICE:  STABLE TRUE
 b 
---
 t
 t
(2 rows)

select stable_false() or volatile_true() as b from two;
NOTICE:  STABLE FALSE
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE TRUE
 b 
---
 t
 t
(2 rows)

select stable_false() or stable_false() or volatile_true() as b from two;
NOTICE:  STABLE FALSE
NOTICE:  STABLE FALSE
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE TRUE
 b 
---
 t
 t
(2 rows)

select volatile_true() or volatile_false() or stable_false() as b from two;
NOTICE:  STABLE FALSE
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE TRUE
 b 
---
 t
 t
(2 rows)

select volatile_false() or volatile_true() or stable_false() as b from two;
NOTICE:  STABLE FALSE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE TRUE
 b 
---
 t
 t
(2 rows)

select stable_true() and volatile_false() and stable_false() as b from two;
NOTICE:  STABLE TRUE
NOTICE:  STABLE FALSE
 b 
---
 f
 f
(2 rows)

select stable_false() and volatile_true() and stable_true() as b from two;
NOTICE:  STABLE FALSE
 b 
---
 f
 f
(2 rows)

select stable_true() and volatile_false() as b from two;
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE FALSE
 b 
---
 f
 f
(2 rows)

select stable_true() and stable_true() and volatile_false() as b from two;
NOTICE:  STABLE TRUE
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE FALSE
 b 
---
 f
 f
(2 rows)

select volatile_true() and volatile_false() and stable_true() as b from two;
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
 b 
---
 f
 f
(2 rows)

select volatile_false() and volatile_true() and stable_true() as b from two;
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE FALSE
 b 
---
 f
 f
(2 rows)

select not stable_true() as b from two;
NOTICE:  STABLE TRUE
 b 
---
 f
 f
(2 rows)

select not volatile_true() as b from two;
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE TRUE
 b 
---
 f
 f
(2 rows)

-- Bind params
prepare param_test(bool) as select $1 or stable_false() or volatile_true() as b from two;
execute param_test(true);
 b 
---
 t
 t
(2 rows)

execute param_test(false);
NOTICE:  STABLE FALSE
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE TRUE
 b 
---
 t
 t
(2 rows)

-- Function calls
create function stable(bool) returns bool STABLE language plpgsql as
$$begin raise notice 'STABLE(%)', $1; return $1; end;$$;
create function volatile(bool) returns bool VOLATILE language plpgsql as
$$begin raise notice 'VOLATILE(%)', $1; return $1; end;$$;
select volatile(volatile_true()) from two;
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE(t)
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE(t)
 volatile 
----------
 t
 t
(2 rows)

select stable(stable_true()) from two;
NOTICE:  STABLE TRUE
NOTICE:  STABLE(t)
 stable 
--------
 t
 t
(2 rows)

select stable(volatile_true()) from two;
NOTICE:  VOLATILE TRUE
NOTICE:  STABLE(t)
NOTICE:  VOLATILE TRUE
NOTICE:  STABLE(t)
 stable 
--------
 t
 t
(2 rows)

select volatile(stable_true()) from two;
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE(t)
NOTICE:  VOLATILE(t)
 volatile 
----------
 t
 t
(2 rows)

create function stable(bool, bool) returns bool STABLE language plpgsql as
$$begin raise notice 'STABLE(%, %)', $1, $2; return $1; end;$$;
create function volatile(bool, bool) returns bool VOLATILE language plpgsql as
$$begin raise notice 'VOLATILE(%, %)', $1, $2; return $1; end;$$;
select stable(volatile_true(), volatile_false()) from two;
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  STABLE(t, f)
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  STABLE(t, f)
 stable 
--------
 t
 t
(2 rows)

select stable(stable_true(), volatile_false()) from two;
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  STABLE(t, f)
NOTICE:  VOLATILE FALSE
NOTICE:  STABLE(t, f)
 stable 
--------
 t
 t
(2 rows)

select stable(stable_true(), stable_false()) from two;
NOTICE:  STABLE TRUE
NOTICE:  STABLE FALSE
NOTICE:  STABLE(t, f)
 stable 
--------
 t
 t
(2 rows)

select volatile(volatile_true(), volatile_false()) from two;
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE(t, f)
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE(t, f)
 volatile 
----------
 t
 t
(2 rows)

select volatile(stable_true(), volatile_false()) from two;
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE(t, f)
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE(t, f)
 volatile 
----------
 t
 t
(2 rows)

select volatile(stable_true(), stable_false()) from two;
NOTICE:  STABLE TRUE
NOTICE:  STABLE FALSE
NOTICE:  VOLATILE(t, f)
NOTICE:  VOLATILE(t, f)
 volatile 
----------
 t
 t
(2 rows)

-- Default arguments
create function stable_def(a bool = stable_false(), b bool = volatile_true())
returns bool STABLE language plpgsql as
$$begin raise notice 'STABLE(%, %)', $1, $2; return $1; end;$$;
select stable_def() from two;
NOTICE:  STABLE FALSE
NOTICE:  VOLATILE TRUE
NOTICE:  STABLE(f, t)
NOTICE:  VOLATILE TRUE
NOTICE:  STABLE(f, t)
 stable_def 
------------
 f
 f
(2 rows)

select stable_def(b := stable_true()) from two;
NOTICE:  STABLE FALSE
NOTICE:  STABLE TRUE
NOTICE:  STABLE(f, t)
 stable_def 
------------
 f
 f
(2 rows)

select stable_def(volatile_false()) from two;
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE TRUE
NOTICE:  STABLE(f, t)
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE TRUE
NOTICE:  STABLE(f, t)
 stable_def 
------------
 f
 f
(2 rows)

-- Operators
create function stable_eq(bool, bool) returns bool STABLE language plpgsql as
$$begin raise notice 'STABLE % == %', $1, $2; return $1 = $2; end;$$;
create function volatile_eq(bool, bool) returns bool VOLATILE language plpgsql as
$$begin raise notice 'VOLATILE % =%%= %', $1, $2; return $1 = $2; end;$$;
create operator == (procedure = stable_eq, leftarg=bool, rightarg=bool);
create operator =%= (procedure = volatile_eq, leftarg=bool, rightarg=bool);
select volatile_true() == volatile_false() from two;
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  STABLE t == f
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  STABLE t == f
 ?column? 
----------
 f
 f
(2 rows)

select stable_true() == volatile_false() from two;
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  STABLE t == f
NOTICE:  VOLATILE FALSE
NOTICE:  STABLE t == f
 ?column? 
----------
 f
 f
(2 rows)

select stable_true() == stable_false() from two;
NOTICE:  STABLE TRUE
NOTICE:  STABLE FALSE
NOTICE:  STABLE t == f
 ?column? 
----------
 f
 f
(2 rows)

select volatile_true() =%= volatile_false() from two;
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE t =%= f
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE t =%= f
 ?column? 
----------
 f
 f
(2 rows)

select stable_true() =%= volatile_false() from two;
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE t =%= f
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE t =%= f
 ?column? 
----------
 f
 f
(2 rows)

select stable_true() =%= stable_false() from two;
NOTICE:  STABLE TRUE
NOTICE:  STABLE FALSE
NOTICE:  VOLATILE t =%= f
NOTICE:  VOLATILE t =%= f
 ?column? 
----------
 f
 f
(2 rows)

select (volatile_true() or stable_true()) == true as b from two;
NOTICE:  STABLE TRUE
NOTICE:  STABLE t == t
NOTICE:  STABLE t == t
 b 
---
 t
 t
(2 rows)

-- Coalesce
create function stable_null() returns bool STABLE language plpgsql as
$$begin raise notice 'STABLE NULL'; return null; end;$$;
create function volatile_null() returns bool VOLATILE language plpgsql as
$$begin raise notice 'VOLATILE NULL'; return null; end;$$;
select coalesce(stable_null(), stable_true()) from two;
NOTICE:  STABLE NULL
NOTICE:  STABLE TRUE
 coalesce 
----------
 t
 t
(2 rows)

select coalesce(stable_true(), volatile_null()) from two;
NOTICE:  STABLE TRUE
 coalesce 
----------
 t
 t
(2 rows)

select coalesce(volatile_null(), stable_null(), volatile_true()) from two;
NOTICE:  VOLATILE NULL
NOTICE:  STABLE NULL
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE NULL
NOTICE:  VOLATILE TRUE
 coalesce 
----------
 t
 t
(2 rows)

-- Case/when
select case when stable_true() then 't' else volatile_false() end as b from two;
NOTICE:  STABLE TRUE
 b 
---
 t
 t
(2 rows)

select case when volatile_true() then stable_true() else stable_false() end as b from two;
NOTICE:  VOLATILE TRUE
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE TRUE
 b 
---
 t
 t
(2 rows)

select case when i=1 then stable_true() else stable_false() end as b from two;
NOTICE:  STABLE TRUE
NOTICE:  STABLE FALSE
 b 
---
 t
 f
(2 rows)

select case when i=1 then volatile_true() else volatile_false() end as b from two;
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE FALSE
 b 
---
 t
 f
(2 rows)

select case when 't' then 't' else volatile_false() end == true as b from two;
NOTICE:  STABLE t == t
 b 
---
 t
 t
(2 rows)

-- Coerce via I/O
select stable_true()::text::bool == true as b from two;
NOTICE:  STABLE TRUE
NOTICE:  STABLE t == t
 b 
---
 t
 t
(2 rows)

select volatile_true()::text::bool == true as b from two;
NOTICE:  VOLATILE TRUE
NOTICE:  STABLE t == t
NOTICE:  VOLATILE TRUE
NOTICE:  STABLE t == t
 b 
---
 t
 t
(2 rows)

-- IS DISTINCT FROM
select (stable_true() is not distinct from volatile_false()) as b from two;
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE FALSE
NOTICE:  VOLATILE FALSE
 b 
---
 f
 f
(2 rows)

select (stable_true() is distinct from stable_false()) == false as b from two;
NOTICE:  STABLE TRUE
NOTICE:  STABLE FALSE
NOTICE:  STABLE t == f
 b 
---
 f
 f
(2 rows)

select (volatile_true() is distinct from null) as b from two;
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE TRUE
 b 
---
 t
 t
(2 rows)

-- IS NULL
select volatile_true() is null == false as b from two;
NOTICE:  VOLATILE TRUE
NOTICE:  STABLE f == f
NOTICE:  VOLATILE TRUE
NOTICE:  STABLE f == f
 b 
---
 t
 t
(2 rows)

select stable_null() is not null == true as b from two;
NOTICE:  STABLE NULL
NOTICE:  STABLE f == t
 b 
---
 f
 f
(2 rows)

-- Boolean tests
select volatile_false() is true == true as b from two;
NOTICE:  VOLATILE FALSE
NOTICE:  STABLE f == t
NOTICE:  VOLATILE FALSE
NOTICE:  STABLE f == t
 b 
---
 f
 f
(2 rows)

select stable_null() is not unknown == false as b from two;
NOTICE:  STABLE NULL
NOTICE:  STABLE f == f
 b 
---
 t
 t
(2 rows)

-- Field select -- not currently cached
create function stable_row(a out int, b out int) STABLE language plpgsql as
$$begin raise notice 'STABLE ROW'; a = 1; b = 2; end;$$;
select (stable_row()).a from two;
NOTICE:  STABLE ROW
NOTICE:  STABLE ROW
 a 
---
 1
 1
(2 rows)

-- INSERT column default expressions
create table defaults (
	dummy int,
	a bool default stable_true(),
	b bool default volatile_true()
);
insert into defaults (dummy) values(0), (1);
NOTICE:  STABLE TRUE
NOTICE:  VOLATILE TRUE
NOTICE:  VOLATILE TRUE
-- Make sure we don't cache PL/pgSQL simple expressions -- these expressions
-- are only prepared once per transaction and then executed multiple times
create function stable_max() returns int STABLE language plpgsql as
$$begin return (select max(i) from two); end;$$;
create function simple() returns int STABLE language plpgsql as
$$begin return stable_max(); end;$$;
begin;
select simple();
 simple 
--------
      2
(1 row)

insert into two values(3);
select simple();
 simple 
--------
      3
(1 row)

rollback;
-- The end
drop table defaults;
drop table two;
